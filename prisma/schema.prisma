// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    mailsSent     Mail[] @relation("SentMails")
    mailsReceived Mail[] @relation("ReceivedMails")
    // mailCC Mail[] @relation("CCMails")
    // mailsBCC Mail[] @relation("BCCMails")

    mailStarred Mail[] @relation("starredMails")
    mailDeleted Mail[] @relation("deletedMails")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model EmailUser {
    id        String   @id @default(cuid())
    name      String
    email     String   @unique
    password  String   @db.Text
    // isValidated Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // user      User     @relation(fields: [userId], references: [id])
    // userId    String

    @@index([email])
}

// schema for email

model Mail {
    id        Int      @id @default(autoincrement())
    subject   String
    body      String    @db.Text
    createdAt DateTime  @default(now())
    sentAt    DateTime? 

    from String
    to String
    cc String?
    bcc String?

    starred String[]
    deleted String[]

    starredUser User[] @relation("starredMails")
    deletedUser User[] @relation("deletedMails")


    fromUser User @relation("SentMails", fields: [from], references: [email])
    toUser User @relation("ReceivedMails", fields: [to], references: [email])
    // ccUser User? @relation("CCMails", fields: [cc], references: [email])
    // bccUser User? @relation("BCCMails", fields: [bcc], references: [email])

    @@index([id])
}

enum Role {
    FROM
    TO
    CC
    BCC
}

// schema for chats
